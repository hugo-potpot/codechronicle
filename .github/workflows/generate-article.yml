name: Generate Article on PR

permissions:
  pull-requests: write
  issues: write
  contents: write

on:
  pull_request:
    branches:
      - master

jobs:
  generate-article:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Generate article
        run: node scripts/generate-article.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Git Status
        run: git status

      - name: Add changes
        run: git add blog/*.md

      - name: Commit generated article
        run: git commit -m "Generated article" || echo "No changes to commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and rebase
        run: git pull --rebase origin ${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes
        run: git push origin HEAD:${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload generated article
        uses: actions/upload-artifact@v4
        with:
          name: generated-article
          path: blog/*.md

      - name: Extract frontmatter
        id: frontmatter
        run: |
          LATEST_FILE=$(ls -t blog/*.md | head -n1)
          TITLE=$(grep "title:" "$LATEST_FILE" | cut -d '"' -f 2)
          SUMMARY=$(grep "summary:" "$LATEST_FILE" | cut -d ':' -f 2- | xargs)
          echo "title=$TITLE" >> $GITHUB_ENV
          echo "summary=$SUMMARY" >> $GITHUB_ENV

      - name: Add comment to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Title: ${process.env.title}\nSummary: ${process.env.summary}`
            })